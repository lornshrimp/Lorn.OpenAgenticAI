// <auto-generated />
using System;
using Lorn.OpenAgenticAI.Infrastructure.Data.Sqlite;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Lorn.OpenAgenticAI.Infrastructure.Data.Sqlite.Migrations
{
    [DbContext(typeof(SqliteOpenAgenticAIDbContext))]
    partial class SqliteOpenAgenticAIDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("Lorn.OpenAgenticAI.Domain.Models.Execution.ResourceUtilizationEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("ExecutionMetricsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ResourceName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Unit")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<double>("UtilizationRate")
                        .HasColumnType("decimal(5,4)");

                    b.HasKey("Id");

                    b.ToTable("ResourceUtilizationEntries");
                });

            modelBuilder.Entity("Lorn.OpenAgenticAI.Domain.Models.Execution.StepExecutionTimeEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("ExecutionMetricsId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ExecutionTimeMs")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StepName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("StepExecutionTimeEntries");
                });

            modelBuilder.Entity("Lorn.OpenAgenticAI.Domain.Models.Execution.TaskExecutionHistory", b =>
                {
                    b.Property<string>("ExecutionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("ErrorCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EstimatedCost")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ExecutionStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IsSuccessful")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LlmModel")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("LlmProvider")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RequestId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("RequestType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ResultSummary")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TokenUsage")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TotalExecutionTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserInput")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("ExecutionId");

                    b.HasIndex("ExecutionStatus")
                        .HasDatabaseName("IX_SQLite_TaskExecutionHistory_Status");

                    b.HasIndex("IsSuccessful")
                        .HasDatabaseName("IX_SQLite_TaskExecutionHistory_IsSuccessful");

                    b.HasIndex("RequestType")
                        .HasDatabaseName("IX_SQLite_TaskExecutionHistory_RequestType");

                    b.HasIndex("StartTime")
                        .HasDatabaseName("IX_SQLite_TaskExecutionHistory_StartTime");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_SQLite_TaskExecutionHistory_UserId");

                    b.HasIndex("UserId", "StartTime")
                        .HasDatabaseName("IX_SQLite_TaskExecutionHistory_User_StartTime");

                    b.HasIndex("UserId", "StartTime", "ExecutionStatus");

                    b.ToTable("TaskExecutionHistories");
                });

            modelBuilder.Entity("Lorn.OpenAgenticAI.Domain.Models.LLM.Model", b =>
                {
                    b.Property<string>("ModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("ContextLength")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("IsLatestVersion")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IsPrebuilt")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MaxOutputTokens")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModelGroup")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PerformanceMetrics")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PricingInfo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("SupportedCapabilities")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ModelId");

                    b.HasIndex("IsLatestVersion")
                        .HasDatabaseName("IX_SQLite_Model_LatestVersion");

                    b.HasIndex("IsPrebuilt")
                        .HasDatabaseName("IX_SQLite_Model_Prebuilt");

                    b.HasIndex("ModelGroup")
                        .HasDatabaseName("IX_SQLite_Model_Group");

                    b.HasIndex("ModelName")
                        .HasDatabaseName("IX_SQLite_Model_Name");

                    b.HasIndex("ProviderId", "ModelName")
                        .IsUnique()
                        .HasDatabaseName("IX_SQLite_Model_Provider_Name");

                    b.ToTable("Models");
                });

            modelBuilder.Entity("Lorn.OpenAgenticAI.Domain.Models.LLM.ModelParameterEntry", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConfigurationId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("ValueJson")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ValueType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConfigurationId", "Key")
                        .IsUnique();

                    b.ToTable("ModelParameterEntries");
                });

            modelBuilder.Entity("Lorn.OpenAgenticAI.Domain.Models.LLM.ModelProvider", b =>
                {
                    b.Property<string>("ProviderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ApiKeyUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("DefaultApiConfiguration")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DocsUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("IconUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("IsPrebuilt")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModelsUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderTypeId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("WebsiteUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.HasKey("ProviderId");

                    b.HasIndex("IsPrebuilt")
                        .HasDatabaseName("IX_SQLite_ModelProvider_Prebuilt");

                    b.HasIndex("ProviderName")
                        .HasDatabaseName("IX_SQLite_ModelProvider_Name");

                    b.HasIndex("ProviderTypeId")
                        .HasDatabaseName("IX_SQLite_ModelProvider_Type");

                    b.ToTable("ModelProviders");
                });

            modelBuilder.Entity("Lorn.OpenAgenticAI.Domain.Models.LLM.ModelUserConfiguration", b =>
                {
                    b.Property<string>("ConfigurationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("IsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastUsedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModelId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProviderId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderUserConfigurationConfigurationId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ConfigurationId");

                    b.HasIndex("ModelId");

                    b.HasIndex("ProviderId");

                    b.HasIndex("ProviderUserConfigurationConfigurationId");

                    b.HasIndex("UserId", "ModelId", "ProviderId")
                        .IsUnique();

                    b.ToTable("ModelUserConfigurations");
                });

            modelBuilder.Entity("Lorn.OpenAgenticAI.Domain.Models.LLM.PricingSpecialEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("IsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PricingInfoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PricingKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PricingSpecialEntries");
                });

            modelBuilder.Entity("Lorn.OpenAgenticAI.Domain.Models.LLM.ProviderCustomSettingEntry", b =>
                {
                    b.Property<string>("EntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConfigurationId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("IsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SettingKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("SettingValue")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("ValueType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("EntryId");

                    b.HasIndex("ConfigurationId", "SettingKey");

                    b.ToTable("ProviderCustomSettingEntries");
                });

            modelBuilder.Entity("Lorn.OpenAgenticAI.Domain.Models.LLM.ProviderUserConfiguration", b =>
                {
                    b.Property<string>("ConfigurationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("IsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastUsedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProviderId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("UsageQuotaId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ConfigurationId");

                    b.HasIndex("ProviderId");

                    b.HasIndex("UsageQuotaId");

                    b.HasIndex("UserId", "ProviderId")
                        .IsUnique();

                    b.ToTable("ProviderUserConfigurations");
                });

            modelBuilder.Entity("Lorn.OpenAgenticAI.Domain.Models.LLM.QualityThresholdEntry", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConfigurationId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("ThresholdName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<double>("ThresholdValue")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConfigurationId", "ThresholdName")
                        .IsUnique();

                    b.ToTable("QualityThresholdEntries");
                });

            modelBuilder.Entity("Lorn.OpenAgenticAI.Domain.Models.LLM.UsageQuotaCustomLimitEntry", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("LimitName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("LimitValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UsageQuotaId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UsageQuotaId");

                    b.ToTable("UsageQuotaCustomLimitEntries");
                });

            modelBuilder.Entity("Lorn.OpenAgenticAI.Domain.Models.MCP.MCPConfiguration", b =>
                {
                    b.Property<string>("ConfigurationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AdapterConfiguration")
                        .HasColumnType("TEXT");

                    b.Property<string>("Arguments")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Command")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("EnvironmentVariables")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("IsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastUsedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderInfo")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("TimeoutSeconds")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.HasKey("ConfigurationId");

                    b.HasIndex("IsEnabled")
                        .HasDatabaseName("IX_SQLite_MCPConfiguration_IsEnabled");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_SQLite_MCPConfiguration_Name");

                    b.HasIndex("Type")
                        .HasDatabaseName("IX_SQLite_MCPConfiguration_Type");

                    b.HasIndex("CreatedBy", "Name");

                    b.HasIndex("Type", "IsEnabled")
                        .HasDatabaseName("IX_SQLite_MCPConfiguration_Type_Enabled");

                    b.HasIndex("CreatedBy", "IsEnabled", "Type");

                    b.ToTable("MCPConfigurations");
                });

            modelBuilder.Entity("Lorn.OpenAgenticAI.Domain.Models.Monitoring.MetricContextEntry", b =>
                {
                    b.Property<string>("EntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ContextKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContextValue")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("MetricId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("ValueType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("EntryId");

                    b.HasIndex("MetricId", "ContextKey");

                    b.ToTable("MetricContextEntries");
                });

            modelBuilder.Entity("Lorn.OpenAgenticAI.Domain.Models.Monitoring.MetricTagEntry", b =>
                {
                    b.Property<string>("EntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("MetricId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TagKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("TagValue")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.HasKey("EntryId");

                    b.HasIndex("MetricId", "TagKey");

                    b.ToTable("MetricTagEntries");
                });

            modelBuilder.Entity("Lorn.OpenAgenticAI.Domain.Models.Monitoring.PerformanceMetricsRecord", b =>
                {
                    b.Property<string>("MetricId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AggregationPeriod")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ExecutionId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MetricName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("MetricTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("MetricType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("MetricUnit")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<double>("MetricValue")
                        .HasColumnType("REAL");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("MetricId");

                    b.HasIndex("ExecutionId");

                    b.HasIndex("UserId");

                    b.HasIndex("MetricType", "MetricTimestamp");

                    b.HasIndex("MetricType", "MetricName", "MetricTimestamp");

                    b.ToTable("PerformanceMetrics");
                });

            modelBuilder.Entity("Lorn.OpenAgenticAI.Domain.Models.UserManagement.UserMetadataEntry", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ValueJson")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ValueType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "Key")
                        .IsUnique();

                    b.ToTable("UserMetadataEntries");
                });

            modelBuilder.Entity("Lorn.OpenAgenticAI.Domain.Models.UserManagement.UserPreferences", b =>
                {
                    b.Property<string>("PreferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("IsSystemDefault")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("PreferenceCategory")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PreferenceKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PreferenceValue")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ValueType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("PreferenceId");

                    b.HasIndex("UserId", "PreferenceCategory", "PreferenceKey")
                        .IsUnique();

                    b.ToTable("UserPreferences");
                });

            modelBuilder.Entity("Lorn.OpenAgenticAI.Domain.Models.UserManagement.UserProfile", b =>
                {
                    b.Property<string>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastLoginTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProfileVersion")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.HasIndex("CreatedTime");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("IsActive");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("UserProfiles", (string)null);
                });

            modelBuilder.Entity("Lorn.OpenAgenticAI.Domain.Models.ValueObjects.ApiHeaderEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ApiConfigurationId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("HeaderName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("HeaderValue")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("IsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ApiHeaderEntries");
                });

            modelBuilder.Entity("Lorn.OpenAgenticAI.Domain.Models.ValueObjects.StepParameters", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("StepParameters");
                });

            modelBuilder.Entity("Lorn.OpenAgenticAI.Domain.Models.ValueObjects.UsageQuota", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AlertThreshold")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CostLimit")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DailyLimit")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MonthlyLimit")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("UsageQuota");
                });

            modelBuilder.Entity("Lorn.OpenAgenticAI.Domain.Models.Workflow.StepParameterEntry", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ParameterType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("StepParametersId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ValueJson")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ValueType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("StepParametersId");

                    b.ToTable("StepParameterEntries");
                });

            modelBuilder.Entity("Lorn.OpenAgenticAI.Domain.Models.Workflow.WorkflowMetadataEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("IsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MetadataKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ValueJson")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ValueType")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("WorkflowDefinitionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("WorkflowMetadataEntries");
                });

            modelBuilder.Entity("Lorn.OpenAgenticAI.Domain.Models.Workflow.WorkflowTemplate", b =>
                {
                    b.Property<string>("TemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<long>("EstimatedExecutionTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IconUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("IsPublic")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IsSystemTemplate")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<double>("Rating")
                        .HasColumnType("REAL");

                    b.Property<string>("RequiredCapabilities")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TemplateDefinition")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TemplateName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("TemplateVersion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("ThumbnailData")
                        .HasColumnType("BLOB");

                    b.Property<int>("UsageCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TemplateId");

                    b.HasIndex("Category")
                        .HasDatabaseName("IX_SQLite_WorkflowTemplate_Category");

                    b.HasIndex("IsPublic")
                        .HasDatabaseName("IX_SQLite_WorkflowTemplate_IsPublic");

                    b.HasIndex("IsSystemTemplate")
                        .HasDatabaseName("IX_SQLite_WorkflowTemplate_IsSystemTemplate");

                    b.HasIndex("TemplateName")
                        .IsUnique()
                        .HasDatabaseName("IX_SQLite_WorkflowTemplate_Name");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_SQLite_WorkflowTemplate_UserId");

                    b.HasIndex("Category", "IsPublic", "IsSystemTemplate")
                        .HasDatabaseName("IX_SQLite_WorkflowTemplate_Category_Public_System");

                    b.ToTable("WorkflowTemplates");
                });

            modelBuilder.Entity("Lorn.OpenAgenticAI.Domain.Models.Workflow.WorkflowTemplateStep", b =>
                {
                    b.Property<string>("StepId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("DependsOnSteps")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("IsOptional")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ParametersId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RequiredCapability")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("StepDescription")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("StepName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("StepOrder")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StepType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("TemplateId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TimeoutSeconds")
                        .HasColumnType("INTEGER");

                    b.HasKey("StepId");

                    b.HasIndex("ParametersId");

                    b.HasIndex("TemplateId", "StepOrder")
                        .IsUnique();

                    b.ToTable("WorkflowTemplateSteps");
                });

            modelBuilder.Entity("Lorn.OpenAgenticAI.Domain.Models.Execution.TaskExecutionHistory", b =>
                {
                    b.HasOne("Lorn.OpenAgenticAI.Domain.Models.UserManagement.UserProfile", "User")
                        .WithMany("ExecutionHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lorn.OpenAgenticAI.Domain.Models.LLM.Model", b =>
                {
                    b.HasOne("Lorn.OpenAgenticAI.Domain.Models.LLM.ModelProvider", "Provider")
                        .WithMany("Models")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("Lorn.OpenAgenticAI.Domain.Models.LLM.ModelUserConfiguration", b =>
                {
                    b.HasOne("Lorn.OpenAgenticAI.Domain.Models.LLM.Model", "Model")
                        .WithMany("UserConfigurations")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Lorn.OpenAgenticAI.Domain.Models.LLM.ModelProvider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Lorn.OpenAgenticAI.Domain.Models.LLM.ProviderUserConfiguration", null)
                        .WithMany("ModelConfigurations")
                        .HasForeignKey("ProviderUserConfigurationConfigurationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Lorn.OpenAgenticAI.Domain.Models.UserManagement.UserProfile", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Model");

                    b.Navigation("Provider");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lorn.OpenAgenticAI.Domain.Models.LLM.ProviderCustomSettingEntry", b =>
                {
                    b.HasOne("Lorn.OpenAgenticAI.Domain.Models.LLM.ProviderUserConfiguration", "Configuration")
                        .WithMany("CustomSettingEntries")
                        .HasForeignKey("ConfigurationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Configuration");
                });

            modelBuilder.Entity("Lorn.OpenAgenticAI.Domain.Models.LLM.ProviderUserConfiguration", b =>
                {
                    b.HasOne("Lorn.OpenAgenticAI.Domain.Models.LLM.ModelProvider", "Provider")
                        .WithMany("UserConfigurations")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Lorn.OpenAgenticAI.Domain.Models.ValueObjects.UsageQuota", "UsageQuota")
                        .WithMany()
                        .HasForeignKey("UsageQuotaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Lorn.OpenAgenticAI.Domain.Models.UserManagement.UserProfile", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Provider");

                    b.Navigation("UsageQuota");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lorn.OpenAgenticAI.Domain.Models.LLM.UsageQuotaCustomLimitEntry", b =>
                {
                    b.HasOne("Lorn.OpenAgenticAI.Domain.Models.ValueObjects.UsageQuota", null)
                        .WithMany("CustomLimitEntries")
                        .HasForeignKey("UsageQuotaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Lorn.OpenAgenticAI.Domain.Models.MCP.MCPConfiguration", b =>
                {
                    b.HasOne("Lorn.OpenAgenticAI.Domain.Models.UserManagement.UserProfile", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Lorn.OpenAgenticAI.Domain.Models.Monitoring.MetricContextEntry", b =>
                {
                    b.HasOne("Lorn.OpenAgenticAI.Domain.Models.Monitoring.PerformanceMetricsRecord", "Metric")
                        .WithMany("ContextEntries")
                        .HasForeignKey("MetricId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Metric");
                });

            modelBuilder.Entity("Lorn.OpenAgenticAI.Domain.Models.Monitoring.MetricTagEntry", b =>
                {
                    b.HasOne("Lorn.OpenAgenticAI.Domain.Models.Monitoring.PerformanceMetricsRecord", "Metric")
                        .WithMany("TagEntries")
                        .HasForeignKey("MetricId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Metric");
                });

            modelBuilder.Entity("Lorn.OpenAgenticAI.Domain.Models.Monitoring.PerformanceMetricsRecord", b =>
                {
                    b.HasOne("Lorn.OpenAgenticAI.Domain.Models.Execution.TaskExecutionHistory", "Execution")
                        .WithMany("PerformanceMetrics")
                        .HasForeignKey("ExecutionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Lorn.OpenAgenticAI.Domain.Models.UserManagement.UserProfile", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Execution");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lorn.OpenAgenticAI.Domain.Models.UserManagement.UserMetadataEntry", b =>
                {
                    b.HasOne("Lorn.OpenAgenticAI.Domain.Models.UserManagement.UserProfile", "User")
                        .WithMany("MetadataEntries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lorn.OpenAgenticAI.Domain.Models.UserManagement.UserPreferences", b =>
                {
                    b.HasOne("Lorn.OpenAgenticAI.Domain.Models.UserManagement.UserProfile", "User")
                        .WithMany("UserPreferences")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lorn.OpenAgenticAI.Domain.Models.UserManagement.UserProfile", b =>
                {
                    b.OwnsOne("Lorn.OpenAgenticAI.Domain.Models.ValueObjects.SecuritySettings", "SecuritySettings", b1 =>
                        {
                            b1.Property<string>("UserProfileUserId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("AdditionalSettings")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("AuthenticationMethod")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("TEXT");

                            b1.Property<DateTime>("PasswordLastChanged")
                                .HasColumnType("TEXT");

                            b1.Property<int>("RequireTwoFactor")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("INTEGER")
                                .HasDefaultValue(0);

                            b1.Property<int>("SessionTimeoutMinutes")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("INTEGER")
                                .HasDefaultValue(30);

                            b1.HasKey("UserProfileUserId");

                            b1.ToTable("UserProfiles");

                            b1.WithOwner()
                                .HasForeignKey("UserProfileUserId");
                        });

                    b.Navigation("SecuritySettings")
                        .IsRequired();
                });

            modelBuilder.Entity("Lorn.OpenAgenticAI.Domain.Models.Workflow.StepParameterEntry", b =>
                {
                    b.HasOne("Lorn.OpenAgenticAI.Domain.Models.ValueObjects.StepParameters", null)
                        .WithMany("ParameterEntries")
                        .HasForeignKey("StepParametersId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Lorn.OpenAgenticAI.Domain.Models.Workflow.WorkflowTemplate", b =>
                {
                    b.HasOne("Lorn.OpenAgenticAI.Domain.Models.UserManagement.UserProfile", "User")
                        .WithMany("WorkflowTemplates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lorn.OpenAgenticAI.Domain.Models.Workflow.WorkflowTemplateStep", b =>
                {
                    b.HasOne("Lorn.OpenAgenticAI.Domain.Models.ValueObjects.StepParameters", "Parameters")
                        .WithMany()
                        .HasForeignKey("ParametersId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Lorn.OpenAgenticAI.Domain.Models.Workflow.WorkflowTemplate", "Template")
                        .WithMany("TemplateSteps")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Parameters");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Lorn.OpenAgenticAI.Domain.Models.Execution.TaskExecutionHistory", b =>
                {
                    b.Navigation("PerformanceMetrics");
                });

            modelBuilder.Entity("Lorn.OpenAgenticAI.Domain.Models.LLM.Model", b =>
                {
                    b.Navigation("UserConfigurations");
                });

            modelBuilder.Entity("Lorn.OpenAgenticAI.Domain.Models.LLM.ModelProvider", b =>
                {
                    b.Navigation("Models");

                    b.Navigation("UserConfigurations");
                });

            modelBuilder.Entity("Lorn.OpenAgenticAI.Domain.Models.LLM.ProviderUserConfiguration", b =>
                {
                    b.Navigation("CustomSettingEntries");

                    b.Navigation("ModelConfigurations");
                });

            modelBuilder.Entity("Lorn.OpenAgenticAI.Domain.Models.Monitoring.PerformanceMetricsRecord", b =>
                {
                    b.Navigation("ContextEntries");

                    b.Navigation("TagEntries");
                });

            modelBuilder.Entity("Lorn.OpenAgenticAI.Domain.Models.UserManagement.UserProfile", b =>
                {
                    b.Navigation("ExecutionHistories");

                    b.Navigation("MetadataEntries");

                    b.Navigation("UserPreferences");

                    b.Navigation("WorkflowTemplates");
                });

            modelBuilder.Entity("Lorn.OpenAgenticAI.Domain.Models.ValueObjects.StepParameters", b =>
                {
                    b.Navigation("ParameterEntries");
                });

            modelBuilder.Entity("Lorn.OpenAgenticAI.Domain.Models.ValueObjects.UsageQuota", b =>
                {
                    b.Navigation("CustomLimitEntries");
                });

            modelBuilder.Entity("Lorn.OpenAgenticAI.Domain.Models.Workflow.WorkflowTemplate", b =>
                {
                    b.Navigation("TemplateSteps");
                });
#pragma warning restore 612, 618
        }
    }
}
